// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}


// enable ERD diagrams
generator erd {
  provider = "prisma-erd-generator"
  output = "../../docs/prisma-ERD.png"
  theme = "dark"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// test model
model Counter {
  id    Int @id @default(autoincrement())
  value Int
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique
  firstName String
  lastName  String
  // one of ['ADMIN', 'STAFF', 'CUSTOMER'];   
  role      String
  phone     String
  // MD5  hash, not plaintext, no salt for simplicity in this implementation
  password  String

  // metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // relations
  orders          Order[]
  paymentDetails  PaymentDetail[]
}

model UserAccessLog {
  id Int @id @default(autoincrement())

  loginDate  DateTime
  logoutDate DateTime?

  // weak referential integrity to avoid complicating
  // the user entity
  userId            Int
}

// an "IOT device" item is considered a product
// a product must be created before being added to the catalogue
// a product is not automatically in the catalogue
model Product {
  id Int @id @default(autoincrement())

  catalogue CatalogueEntry?

  // UPC is a globally unique product identifier, similar to a SKU
  // max-length of 12 chars (sqlite maps to TEXT without limits as varchar would allow)
  uniqueProductCode String @unique
  name              String
  brandName         String
  description       String

  // metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CatalogueEntry {
  id Int @id @default(autoincrement())

  product           Product @relation(fields: [productId], references: [id])
  productId         Int     @unique

  // the UPC of a product is used for searching across both the products and products WITHIN the catalogue
  // to simplify this implementation the field is copied from the product into the catalogue entry on create
  // since a product UPC isn't editable, this is fairly immutable by design but could be enforced better
  // however, uniqueness is not enforced by the ORM, as the app may later archive and re-add a product with the same UPC
  uniqueProductCode String

  // price to customer in AUD
  price           Int
  // one of ['TOOLS AND TEST EQUIPMENT', 'SOUND AND VIDEO', 'CABLES AND CONNECTORS', 'COMPONENTS AND ELECTROMECHANICAL', 'POWER AND BATTERIES', 'HOBBIES AND GADGETS', '3D PRINTING', 'SECURITY AND SURVEILLANCE', 'COMPUTING AND COMMUNICATION', 'KITS, SCIENCE AND LEARNING', 'OUTDOORS AND AUTOMOTIVE']
  // I'm mentally considering this as something similar to JayCar, so using their categories seems like a good starting point (take from https://www.jaycar.com.au/)
  productCategory String
  stockQuantity   Int

  orderItems  OrderItem[]  

  // support soft-deleting instead of hard deltion to ensure orders can always refer back to the original catalogue entry
  isArchived    Boolean

  // metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}





model PaymentDetail {
  id Int @id @default(autoincrement())

  provider      String
  method        String
  expiresAt     String

  user          User @relation(fields: [userId], references: [id])
  userId        Int

  // metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  // started is when we init the order server-side and persist the shopping cart
  // enum: [ ERROR, CHECKED_OUT, PAYMENT_CONFIRMED, EMAIL_CONFIRMED, PENDING_SHIPPING, SHIPPED, SHIPPING, DELIVERED  ]
  status            String
  errorMessage      String

  user              User    @relation(fields: [userId], references: [id])
  userId            Int

  // relations
  paymentConfirmation PaymentConfirmation?
  shippingDetail      ShippingDetail?
  orderItems          OrderItem[]

  // metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model OrderItem {
  id Int @id @default(autoincrement())

  unitQuantity    Int
  unitCost        Int

  order Order @relation(fields: [orderId], references: [id])
  orderId  Int

  catalogueEntry CatalogueEntry @relation(fields: [catalogueEntryId], references: [id])
  catalogueEntryId  Int
}

model PaymentConfirmation {
  id Int @id @default(autoincrement())

  amount        Int
  confirmedAt   DateTime
  // reference to 3rd party payment system (faked in this system)
  reference     String
  provider      String
  method        String

  // enum: [ ERROR, PENDING, CONFIRMED]
  status       String
  errorMessage String

  order             Order @relation(fields: [orderId], references: [id])
  orderId           Int     @unique

  // metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingDetail {
  id Int @id @default(autoincrement())

  trackingId      String
  deliverService  String
  shippedAt       DateTime
  estDeliveryAt   DateTime
  
  // address is not normalised here to simplify the implementation
  deliveryAddress   String

  order             Order @relation(fields: [orderId], references: [id])
  orderId           Int     @unique

  // metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}